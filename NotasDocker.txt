-Terminos que hay que manejar en Docker: Imagenes, Contenedores.
-En una analogia en la POO:
	Una imagen: Clase
	Contenedor: Objeto de una clase

-Los contenedores dockers utilizan el Kernel del OS Anfitrion

-Las maquinas virtuales necesitan tener un sistema operativo Invitado
y este estar supervisado por un Hypervisor, que a su ves este ultimo
es gestionado por OS Anfitrion.

-Los contenedores docker pueden instalarse en sistemas operativos
que sean maquinas virtuales.

-Arquitectura docker:
	• Client
	• DOCKER_HOST
	• Registry

-Docker Engine:
	• Docker CLI
		-Network
		-Container
		-Image
		-Data Volumes		
	• Docker REST API	
	• Docker daemon

DockerFiles vs Imagenes vs Contenedores
	
	DockerFile:
		Es un archivo de texto que contiene los comandos
		necesarios para crear una imagen

	Imagen:
		Se crea a partir de un archivo Dockerfile. Contiene la union
		de sistemas de archivos apilados en capas donde cada capa 
		representa una modificacion de la imagen, y equivale a una
		instruccion en el archivo docker file.

	Contenedor:
		Es una instanacia en ejecucion de una imagen.




	validacion upp
	a la hora de modificarlos 
	A la hora de importar los usuarios desde el school manager se exportaron sin problemas
	Al momento de importar los usuarios en el CSV si se pudo
	En el momento de modificar los usuarios desde el Aula virtual
	no permite guardar los usuarios que se importaron 

	al iniciar sesion que el login reconozca el usuario de correo electronico como un usuario valido
	al momento de modificar nombre de usuario que permita guardarlo sin que de error de usuario invalido
	
======================
Copiar archivos entre maquina HOST y contenedor Docker


El comando cp puede usarse para copiar archivos
Para copiar un archivo del host al concenedor docker podemos usar:
	
	docker cp foo.txt mycontainer:/foo.txt


Para copiar un archivo del concenedor a la maquina host podemos usar:

	docker cp mycontainer:/foo.txt foo.txt


======================	
7.10. Crear un contenedor con un volumen (de tipo bind mount
Para montar un directorio podemos utilizar los flags -v o --mount.

Por lo tanto, la sintaxis para las dos formas de crear un bind_mount serán:

• path_directorio_host:path_directorio_contenedor
• path_directorio_host:path_directorio_contenedor:ro

Ejemplo:

1) Indicar el path completo del directorio que queremos montar en el contenedor.
docker run -d \
--rm \
--name devtest \
-v /home/josejuan/target:/app \
nginx

2) Utilizar la salida del comando pwd para construir el path.

docker run -d \
--rm \
--name devtest \
-v "$(pwd)"/target:/app \
nginx

3) Utilizar la variable $PWD para construir el path.

$ docker run -d \
--rm \
--name devtest \
-v "$PWD"/target:/app \
nginx

docker inspect devtest
"Mounts": [
{
  "Type": "bind",
  "Source": "/home/josejuan/target",
  "Destination": "/app",
  "Mode": "",
  "RW": true,
  "Propagation": "rprivate"
}
],

Cuando realizamos un bind mount sobre un directorio del contenedor que no está
vacío, el contenido de este directorio será reemplazado por el contenido del
directorio del host.

Hay que tener cuidado con esto porque puede provocar comportamientos no
esperados.

En el siguiente ejemplo estamos reemplazando el directorio /usr del contenedor
por el /tmp del host, y por lo tanto el contenedor no podrá iniciarse.

docker run -d \
--rm \
--name broken-container \
-v /tmp:/usr \
nginx

docker: Error response from daemon: OCI runtime create failed: container_linux.go:346: starting
container process caused "exec: \"nginx\": executable file not found in $PATH": unknown.

Crear bind_mounts de sólo lectura

======================	

7.17. DOCKER RESTART POLICIES (--RESTART)

Para configurar una política de renicio en un contenedor se utiliza el flag --restart.

NOTA: Si iniciamos un contenedor con alguna política de reinicio no podremos utilizar el
flag --rm.

docker run -d \
--restart always \
--name mysqlc \
-p 3306:3306 \
-e MYSQL_ROOT_PASSWORD=root \
-v mysql_data:/var/lib/mysql \
mysql

======================
CHAPTER 8. PORTAINER

Portainer es una herramienta web open-source que permite gestionar contenedores Docker de
forma local o remota.

======================
8.1. GESTIÓN DE UN SERVIDOR LOCAL

Los comandos Docker para ejecutar Portainer son los siguientes:

docker run -d \
--rm \
-p 9000:9000 \
--name portainerc \
-v /var/run/docker.sock:/var/run/docker.sock \
-v portainer-data:/data \
portainer/portainer

======================
8.2. GESTIÓN DE UN SERVIDOR REMOTO:

Para configurar el acceso remoto a través del API de Docker, hay que modificar cómo arranca el
Docker daemon.
Tenga en cuenta que habilitar el acceso remoto a través de la API de Docker 
puede suponer un riesgo de seguridad si no se realiza correctamente, 
por lo que se recomienda revisar la documentación oficial: Protect the Docker daemon socket.

Los puertos que se utilizan para el acceso remoto son el 2375 para 
comunicaciones no encriptadas y el 2376 para comunicaciones encriptadas.

En primer lugar habrá que habilitar el acceso remoto a la API de Docker.
Puede encontrar información de cómo hacerlo en la siguiente referencia de
la documentación oficial: How do I enable the remote API for dockerd.

Ejecutar Portainer indicando la IP del servidor remoto 

El comando Docker para ejecutar Portainer es el siguiente:

 docker run -d \
-p 9000:9000 \
--name portainerc \
-v /var/run/docker.sock:/var/run/docker.sock \
-v portainer-data:/data \
portainer/portainer -H tcp://192.168.21.100:2375

Donde 192.168.21.100 se corresponde con la IP del servidor remoto de Docker y 
2375 el puerto donde el Docker daemon está escuchando las peticiones.

NOTA: Tenga en cuenta que tendrá que reemplazar la dirección 
IP 192.168.21.100 por la dirección IP del servidor remoto que quiera gestionar.

======================
CHAPTER 9. REDES EN DOCKER


Cuando instalamos Docker Engine se crean tres redes:

bridge: Es la red que usarán por defecto todos los contenedores que se ejecutan en el mismo
host. También se les conoce como las default bridge network

none: En esta red el contenedor no tendrá asociada ninguna interfaz de red, sólo tendrá la de
loopback (lo).

host: En esta red el contenedor tendrá la misma configuración que el servidor Docker Engine
donde se esté ejecutando.

Además de estas redes, también es posible crear las user-defined bridge network.


======================

9.1. DIFERENCIAS ENTRE LAS REDES DEFAULT BRIDGE Y USERDEFINED BRIDGE

La opcion --link está considerada legacy
por lo cual se recomienda no usarla


Las redes user-defined bridge ofrecen un DNS automático entre los contenedores de la misma
red, mientras que los contenedores de una red default bridge sólo pueden acceder a los otros
contenedores a través de su IP o haciendo uso de la opción --link que está considerada legacy.

Las redes user-defined bridge permiten que un contenedor en ejecución pueda ser añadido
o eliminado de la red, mientras que la redes default bridge no lo permiten


COMMANDOS:
connect : Connect a container to a network
create : Create a network
disconnect : Disconnect a container from a network
inspect : Display detailed information on one or more networks
ls : List networks
prune : Remove all unused networks
rm : Remove one or more networks

======================

CHAPTER 10. ALMACENAMIENTO EN DOCKER


Por defecto, todos los archivos que se crean dentro de un contenedor se almacenan en la última
capa del sistema de archivos (la capa de lectura/escritura), esto quiere decir que los datos que
tenemos en esta capa se perderán cuando el contenedor se elimine y no podremos
compartirlos con otros contenedores.


Docker nos ofrece dos posibilidades para implementar persistencia de datos en los contenedores:

• Bind mounts
• Volumes

10.1. BIND MOUNTS

Los bind mounts pueden estar almacenados en cualquier directorio del sistema de archivos de la
máquina host. Estos archivos pueden ser consultados o modificados por otros procesos de la
máquina host o incluso por otros contenedores Docker

10.2. VOLUMES

Los volumes se almacenan en la máquina host dentro del área del sistema de archivos que gestiona
Docker. Por ejemplo, en Linux será el directorio /var/lib/docker/volumes.

Otros procesos de la máquina host no deberían modificar estos archivos, sólo deberían ser
modificados por contenedores Docker.

Desde la documentación oficial de Docker nos aseguran que esta es la mejor forma de
implementar persistencia de datos en los contenedores Docker.

Comandos: 

Usage: docker volume COMMAND

create : Create a volume
inspect : Display detailed information on one or more volumes
ls : List volumes
prune :  Remove all unused local volumes
rm : Remove one or more volumes

======================
CHAPTER 11. DOCKER SYSTEM:

Comandos: 

Usage: docker system COMMAND

df : Show docker disk usage
events : Get real time events from the server
info : Display system-wide information
prune : Remove unused data

======================

CHAPTER 12. LIMPIEZA DEL EQUIPO

Después de ejecutar los siguientes comandos sólo tendremos en nuestra máquina los contenedores
que estén en ejecución y sus imágenes correspondientes.

docker system df
docker system prune -a
docker volume prune

======================

CHAPTER 14. CREACIÓN DE IMÁGENES A PARTIR DE UN ARCHIVO DOCKERFILE:

14.1. Dockerfiles

Algunas de las instrucciones que podemos incluir en un Dockerfile son las siguientes:



• FROM:
	◦ Indica el nombre de la imagen base de la que partimos.
• ARG:
	◦ Podemos recibir argumentos en el proceso de creación de la imagen.
• LABEL:
	◦ Nos permite incluir metainformación en la imagen, como el nombre del autor, versión, etc.
• RUN:
	◦ Son los comandos que quiero ejecutar en la imagen.
• VOLUME:
	◦ Indica el volumen donde vamos a guardar datos persistentes fuera del contenedor. Para que
sigan estando disponibles cuando el contenedor no esté en ejecución.
• COPY:
	◦ Para poder copiar archivos de nuestra máquina a la imagen.
• EXPOSE:
	◦ Para indicar los puertos que se quieren exponer cuando se ejecute un contenedor con el
parámetro -P. Es informativo.
• ENTRYPOINT:
	◦ Una vez que se crea la instancia del contenedor e instanciado, es lo primero que ejecuta.
	◦ El objetivo es dejar el contenedor en el estado inicial deseado.
	◦ Cada vez que iniciamos un contenedor debe estar en este estado.
	◦ Lo que hagamos en el entrypoint se ejecuta en cada una de las instancias que se realicen.
• CMD:
	◦ Puede tener los parámetros que le vamos a pasar al ENTRYPOINT para que se ejecuten después del ENTRYPOINT.
	◦ Si no hay ENTRYPOINT, ejecuta los comandos que tengamos aquí.
	◦ Si ENTRYPOINT y CMD están presentes en el Dockerfile, primero se ejecuta el
ENTRYPOINT y el CMD se le pasa como parámetro.
	◦ Si sólo está el ENTRYPOINT sólo se ejecuta éste.
	◦ Si sólo está el CMD sólo se ejecuta este.
	◦ Si tenemos varios CMD sólo se ejecuta el último


14.2. BUILD:

Para crear imágenes a partir de un archivo Dockerfile utilizamos el comando docker build.

El comando docker build construye una imagen 
a partir de un archivo Dockerfile, y un context. El buid context
es el conjunto de archivos especificados en una ruta especifica.

docker build .

Adicionalmente si agregamos el flag -f al comando docker build, entonces podemos
mandarle una ruta a nuestro comando docker build:

docker build -f /path/to/a/Dockerfile .


Tambien se puede especificar una etiqueta a la cual se le puede
asignar a la imagen si es que el build se construye exitosamente
con la flag -t :

docker build -t shykes/myapp .

Para etiquetar la imagen en multiples repositorios, entonces
solo agregamos multiples flag -t al comando build:

docker build -t shykes/myapp:1.0.2 -t shykes/myapp:latest .

//escape
The escape directive sets the character used to escape characters 
in a Dockerfile. 

//Environment replacement

Environment variables (declared with the ENV statement) can also be used
in certain instructions as variables to be interpreted by the Dockerfile.

//.dockerignore file
Before the docker CLI sends the context to the docker daemon, 
it looks for a file named .dockerignore in the root directory of the context. 

//FROM

The FROM instruction initializes a new build stage and sets the Base 
Image for subsequent instructions. 
//Understand how ARG and FROM interact

FROM instructions support variables that are declared by any ARG 
instructions that occur before the first FROM.

//RUN
To use a different shell, other than ‘/bin/sh’, use the exec form passing in the desired shell. For example:

RUN ["/bin/bash", "-c", "echo hello"]

//CMD
The CMD instruction has three forms:

CMD ["executable","param1","param2"] (exec form, this is the preferred form)
CMD ["param1","param2"] (as default parameters to ENTRYPOINT)
CMD command param1 param2 (shell form)

//LABEL

he LABEL instruction adds metadata to an image. A LABEL is a key-value pair. To include spaces within a LABEL value, use quotes and backslashes as you would in command-line parsing. A few usage examples:

LABEL "com.example.vendor"="ACME Incorporated"
LABEL com.example.label-with-value="foo"
LABEL version="1.0"
LABEL description="This text illustrates \
that label-values can span multiple lines."

LABEL <key>=<value> <key>=<value> <key>=<value> ...


//EXPOSE


EXPOSE <port> [<port>/<protocol>...]

The EXPOSE instruction informs Docker that the container listens on the 
specified network ports at runtime. You can specify whether the port 
listens on TCP or UDP, and the default is TCP if the protocol is not specified.

EXPOSE 80/udp
To expose on both TCP and UDP, include two lines:

EXPOSE 80/tcp
EXPOSE 80/udp

//ENV
ENV <key>=<value> ...

The ENV instruction sets the environment variable <key> to the value <value>.
Example:

ENV MY_NAME="John Doe"
ENV MY_DOG=Rex\ The\ Dog
ENV MY_CAT=fluffy

The ENV instruction allows for multiple <key>=<value> ... 
variables to be set at one time, and the example below will yield 
the same net results in the final image:

ENV MY_NAME="John Doe" MY_DOG=Rex\ The\ Dog \
    MY_CAT=fluffy

//ADD
ADD has two forms:


ADD [--chown=<user>:<group>] <src>... <dest>
ADD [--chown=<user>:<group>] ["<src>",... "<dest>"]

ADD hom* /mydir/
ADD hom?.txt /mydir/
ADD test.txt relativeDir/
ADD test.txt /absoluteDir/
ADD arr[[]0].txt /mydir/

ADD --chown=55:mygroup files* /somedir/
ADD --chown=bin files* /somedir/
ADD --chown=1 files* /somedir/
ADD --chown=10:11 files* /somedir/



//COPY

COPY has two forms:

COPY [--chown=<user>:<group>] <src>... <dest>
COPY [--chown=<user>:<group>] ["<src>",... "<dest>"]

To add all files starting with “hom”:
COPY hom* /mydir/

In the example below, ? is replaced with any single character, e.g., “home.txt”.
COPY hom?.txt /mydir/

The example below uses a relative path, and adds “test.txt” to <WORKDIR>/relativeDir/:
COPY test.txt relativeDir/

Whereas this example uses an absolute path, and adds “test.txt” to /absoluteDir/
COPY test.txt /absoluteDir/

When copying files or directories that contain
special characters (such as [ and ]), you need
to escape those paths following the Golang rules
to prevent them from being treated as a matching
pattern. For example, to copy a 
file named arr[0].txt, use the following;

COPY arr[[]0].txt /mydir/

COPY --chown=55:mygroup files* /somedir/
COPY --chown=bin files* /somedir/
COPY --chown=1 files* /somedir/
COPY --chown=10:11 files* /somedir/

Optionally COPY accepts a flag --from=<name> that can be used to set the source location to a previous build stage (created with FROM .. AS <name>) that will be used instead of a build context sent by the user. In case a build stage with a specified name can’t be found an image with the same name is attempted to be used instead.

COPY obeys the following rules:

The <src> path must be inside the context of the build; you cannot COPY ../something /something, because the first step of a docker build is to send the context directory (and subdirectories) to the docker daemon.

If <src> is a directory, the entire contents of the directory are copied, including filesystem metadata.



//ENTRYPOINT
ENTRYPOINT has two forms:

The exec form, which is the preferred form:

ENTRYPOINT ["executable", "param1", "param2"]

ENTRYPOINT command param1 param2

docker run -i -t --rm -p 80:80 nginx

//Exec form ENTRYPOINT example
FROM ubuntu
ENTRYPOINT ["top", "-b"]
CMD ["-c"]

//VOLUME
VOLUME ["/data"]


//USER

USER <user>[:<group>]
USER <UID>[:<GID>]

FROM microsoft/windowsservercore
# Create Windows user in the container
RUN net user /add patrick
# Set it for subsequent commands
USER patrick


//WORKDIR

WORKDIR /path/to/workdir

WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd

The output of the final pwd command in this Dockerfile would be /a/b/c.

The WORKDIR instruction can resolve 
environment variables previously set 
using ENV. You can only use environment 
variables explicitly set in the Dockerfile. For example:


ENV DIRPATH=/path
WORKDIR $DIRPATH/$DIRNAME
RUN pwd

The output of the final pwd command
 in this Dockerfile would be:
 
 /path/$DIRNAME

//ARG

ARG <name>[=<default value>]
The ARG instruction defines a variable
that users can pass at build-time to 
the builder with the docker build 
command using the 
--build-arg <varname>=<value> flag. 
If a user specifies a build argument
that was not defined in the Dockerfile,
the build outputs a warning.

A Dockerfile may include one or more ARG 
instructions. For example, the following 
is a valid Dockerfile:


FROM busybox
ARG user1
ARG buildno

//Default values
An ARG instruction can optionally 
include a default value:

FROM busybox
ARG user1=someuser
ARG buildno=1

//Scope
An ARG variable definition comes into 
effect from the line on which it is 
defined in the Dockerfile not from the
argument’s use on the command-line or
elsewhere. For example, consider this 
Dockerfile:

FROM busybox
USER ${user:-some_user}
ARG user
USER $user
# ...

The USER at line 2 evaluates to some_user as the user variable is defined on the subsequent line 3. The USER at line 4 evaluates to what_user as user is defined and the what_user value was passed on the command line. Prior to its definition by an ARG instruction, any use of a variable results in an empty string.

An ARG instruction goes out of scope at the end of the build stage where it was defined. To use an arg in multiple stages, each stage must include the ARG instruction.



FROM busybox
ARG SETTINGS
RUN ./run/setup $SETTINGS

FROM busybox
ARG SETTINGS
RUN ./run/other $SETTINGS

//Using ARG variables



//Predefined ARGs

Docker has a set of predefined ARG 
variables that you can use without a
corresponding ARG instruction in the 
Dockerfile.

HTTP_PROXY
http_proxy
HTTPS_PROXY
https_proxy
FTP_PROXY
ftp_proxy
NO_PROXY
no_proxy

--build-arg <varname>=<value>

For example, consider building the 
following Dockerfile using 
--build-arg HTTP_PROXY=http://user:pass@proxy.lon.example.com

FROM ubuntu
RUN echo "Hello World"

In this case, the value of the HTTP_PROXY variable is not available in the docker history and is not cached. If you were to change location, and your proxy server changed to http://user:pass@proxy.sfo.example.com, a subsequent build does not result in a cache miss.

If you need to override this behaviour then you may do so by adding an ARG statement in the Dockerfile as follows:

FROM ubuntu
ARG HTTP_PROXY
RUN echo "Hello World"

//ONBUILD

ONBUILD <INSTRUCTION>

The ONBUILD instruction adds to the image 
a trigger instruction to be executed at a
later time, when the image is used as the
base for another build. 

The trigger will be executed in the 
context of the downstream build, as 
if it had been inserted immediately 
after the FROM instruction in the 
downstream Dockerfile

For example you might add something like this:

ONBUILD ADD . /app/src
ONBUILD RUN /usr/local/bin/python-build --dir /app/src

Warning

Chaining ONBUILD instructions using ONBUILD ONBUILD isn’t allowed.

Warning

The ONBUILD instruction may not trigger FROM or MAINTAINER instructions.

//STOPSIGNAL

STOPSIGNAL signal


The STOPSIGNAL instruction sets the
system call signal that will be sent
to the container to exit. This signal
can be a valid unsigned number that
matches a position in the kernel’s 
syscall table, for instance 9, or a 
signal name in the format SIGNAME,
for instance SIGKILL.

//HEALTHCHECK

The HEALTHCHECK instruction has two forms:

HEALTHCHECK [OPTIONS] CMD command : (check container health by running a command inside the container)
HEALTHCHECK NONE : (disable any healthcheck inherited from the base image)

When a container has a healthcheck specified, it has a health status in addition to its normal status. This status is initially starting. Whenever a health check passes, it becomes healthy (whatever state it was previously in). After a certain number of consecutive failures, it becomes unhealthy.

The options that can appear before CMD are:

--interval=DURATION (default: 30s)
--timeout=DURATION (default: 30s)
--start-period=DURATION (default: 0s)
--retries=N (default: 3)

For example, to check every five minutes or so that a web-server is able to serve the site’s main page within three seconds:

HEALTHCHECK --interval=5m --timeout=3s \
  CMD curl -f http://localhost/ || exit 1

//SHELL ["executable", "parameters"]

The SHELL instruction allows the default 
shell used for the shell form of commands 
to be overridden. The default shell on 
Linux is ["/bin/sh", "-c"], and on 
Windows is ["cmd", "/S", "/C"]. 
The SHELL instruction must be written 
in JSON form in a Dockerfile.

For example:

FROM microsoft/windowsservercore

# Executed as cmd /S /C echo default
RUN echo default

# Executed as cmd /S /C powershell -command Write-Host default
RUN powershell -command Write-Host default

# Executed as powershell -command Write-Host hello
SHELL ["powershell", "-command"]
RUN Write-Host hello

# Executed as cmd /S /C echo hello
SHELL ["cmd", "/S", "/C"]
RUN echo hello

The following example is a common pattern found on Windows which can be streamlined by using the SHELL instruction:

RUN powershell -command Execute-MyCmdlet -param1 "c:\foo.txt"
The command invoked by docker will be:

cmd /S /C powershell -command Execute-MyCmdlet -param1 "c:\foo.txt"



This is more eficent

RUN ["powershell", "-command", "Execute-MyCmdlet", "-param1 \"c:\\foo.txt\""]

# escape=`

FROM microsoft/nanoserver
SHELL ["powershell","-command"]
RUN New-Item -ItemType Directory C:\Example
ADD Execute-MyCmdlet.ps1 c:\example\
RUN c:\example\Execute-MyCmdlet -sample 'hello world



//Dockerfile examples
# Nginx
#
# VERSION               0.0.1

FROM      ubuntu
LABEL Description="This image is used to start the foobar executable" Vendor="ACME Products" Version="1.0"
RUN apt-get update && apt-get install -y inotify-tools nginx apache2 openssh-server


-------------
# Firefox over VNC
#
# VERSION               0.3

FROM ubuntu

# Install vnc, xvfb in order to create a 'fake' display and firefox
RUN apt-get update && apt-get install -y x11vnc xvfb firefox
RUN mkdir ~/.vnc
# Setup a password
RUN x11vnc -storepasswd 1234 ~/.vnc/passwd
# Autostart firefox (might not be the best way, but it does the trick)
RUN bash -c 'echo "firefox" >> /.bashrc'

EXPOSE 5900
CMD    ["x11vnc", "-forever", "-usepw", "-create"]

-------------------
# Multiple images example
#
# VERSION               0.1

FROM ubuntu
RUN echo foo > bar
# Will output something like ===> 907ad6c2736f

FROM ubuntu
RUN echo moo > oink
# Will output something like ===> 695d7793cbe4

# You'll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with
# /oink.
==================
//DOCKER COMPOSE <----------- SUPER UTIL OJO
==================
Es un framework que nos permite
tener diferentes imagenes configuradas
en un unico archivo yml.

Ejemplo de archivo docker compose:
--------------------------------
version: "3.8"
services:
  postgres_same_net:
    image: postgres:12.4
    ports:
      - "5432:5432"
    networks:
      - same_net
    environment:
      - POSTGRES_PASSWORD=123456

  pgadmin_same_net:
    image: dpage/pgadmin4
    ports:
       - "80:80"
    networks:
       - same_net
    volumes:
       - /home/mnkboy/PostgresBackUp:/var/lib/pgadmin/storage
    environment:
       - PGADMIN_DEFAULT_EMAIL=user@domain.com
       - PGADMIN_DEFAULT_PASSWORD=SuperSecret

networks:
  same_net:
--------------------------------
Estando en la carpeta de arhivo hacemos:

levantar:
	docker-compose up -d

bajar:
	docker-compose down
monitoriear:
	docker-compose ps	

Esta opción sólo nos mostrará las últimas líneas de la salida estándar.
	docker-compose logs
Si utilizamos la opción logs -f el comando se queda mostrando la salida estándar hasta que
pulsemos CTRL + C.
	docker-compose logs -f	
Para detener y eliminar los servicios, con las redes y los volúmenes incluidos tenemos que
indicar la opción down -v:
	docker-compose down -v	


--------------------------------	

Si queremos iniciar las imagenes con archivo docker file usamos la opcion build
Con la opción build indicamos el directorio donde está el archivo Dockerfile que vamos a
utilizar para crear la imagen ①.

version: '3'
services:
  apache:
  build: ./apache ①
  ports:
  - 80:80 ②
  volumes:
  - ./src:/var/www/html ③
  depends_on:
  - mysql ④

=============================
16.12. VARIABLES DE ENTORNO EN ARCHIVOS .ENV

Docker Compose nos permite utilizar archivos .env para crear las variables de entorno.

Para esto creamos la siguiente estructura

├── FOLDER
│   └── docker-compose.yml
│   └── .env

El archivo .env debe estar en la misma carpeta, OJO es un archivo son nombre 
solo con extension .env

Y sustituimos las variables en el archivo .yml
por las variables del archivo .env:

version: '3'
services:
  mysql:
  image: mysql:5.7.28
  ports:
  - 3306:3306
  environment:
  - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
  - MYSQL_DATABASE=${MYSQL_DATABASE}
  - MYSQL_USER=${MYSQL_USER}
  - MYSQL_PASSWORD={MYSQL_PASSWORD}
  volumes:
  - mysql_data:/var/lib/mysql
  phpmyadmin:
  image: phpmyadmin/phpmyadmin
  ports:
  - 8080:80
  environment:
  - PMA_HOST=mysql
  depends_on:
  - mysql
volumes:
  mysql_data:

y corremos normalmente
  